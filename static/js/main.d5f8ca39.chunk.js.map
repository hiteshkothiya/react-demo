{"version":3,"sources":["components/Person/Person.js","components/SideDrawer/DrawerToggleButton.js","config/nav-bar-links.js","components/Toolbar/Toolbar.js","components/Navbar/Navbar.js","components/SideDrawer/SideDrawer.js","components/Backdrop/Backdrop.js","App.js","serviceWorker.js","index.js"],"names":["person","className","drawerToggleButton","props","onClick","click","navBarLinks","label","link","toolbar","links","map","navBarLink","href","DrawerToggleButton","drawerClickHandler","key","navbar","sideDrawer","drawerClasses","show","Navbar","backDrop","App","state","sideDrawerOpen","drawerToggleClickHandler","setState","prevState","backDropClickHandler","this","Backdrop","Toolbar","SideDrawer","Person","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sWAceA,G,YAVA,WACX,OACI,yBAAKC,UAAU,UACX,4CACA,gHACA,4BAAQA,UAAU,kBAAlB,kBCEGC,G,WARY,SAAAC,GAAK,OAC5B,4BAAQF,UAAU,gBAAgBG,QAASD,EAAME,OAC7C,yBAAKJ,UAAU,wBACf,yBAAKA,UAAU,wBACf,yBAAKA,UAAU,2BCPjBK,EAAc,CAClB,CACEC,MAAO,OACPC,KAAM,KAER,CACED,MAAO,WACPC,KAAM,cAER,CACED,MAAO,SACPC,KAAM,YAER,CACED,MAAO,aACPC,KAAM,gBAER,CACED,MAAO,aACPC,KAAM,iBCUKC,EAxBC,SAACN,GACb,IAAMO,EAAQJ,EAAYK,KAAI,SAAAC,GAAU,MAAK,CACzCL,MAAOK,EAAWL,MAClBM,KAAMD,EAAWJ,SAGrB,OACI,4BAAQP,UAAU,WACd,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,8BAA6B,kBAACa,EAAD,CAAoBT,MAAOF,EAAMY,sBAC7E,yBAAKd,UAAU,iBAAf,QACA,yBAAKA,UAAU,oBACf,yBAAKA,UAAU,6BACX,4BACKS,EAAMC,KAAI,SAAAH,GAAI,OACX,wBAAIQ,IAAKR,EAAKD,OAAO,uBAAGM,KAAML,EAAKK,MAAOL,EAAKD,gBCG5DU,G,MAnBA,WACX,IAAMP,EAAQJ,EAAYK,KAAI,SAAAC,GAAU,MAAK,CACzCL,MAAOK,EAAWL,MAClBM,KAAMD,EAAWJ,SAGrB,OACI,yBAAKP,UAAU,sBACX,yBAAKA,UAAU,4BACX,4BACKS,EAAMC,KAAI,SAAAH,GAAI,OACX,wBAAIQ,IAAKR,EAAKD,OAAO,uBAAGM,KAAML,EAAKK,MAAOL,EAAKD,gBCGxDW,EAdI,SAAAf,GACf,IAAIgB,EAAgB,aAMpB,OAJGhB,EAAMiB,OACLD,EAAgB,mBAIhB,yBAAKlB,UAAWkB,GACZ,kBAACE,EAAD,QCNGC,G,MAJE,SAAAnB,GAAK,OAClB,yBAAKF,UAAU,WAAWG,QAASD,EAAME,UCuC9BkB,E,2MAlCbC,MAAQ,CACNC,gBAAgB,G,EAGlBC,yBAA2B,WACzB,EAAKC,UAAS,SAACC,GACb,MAAO,CAACH,gBAAiBG,EAAUH,oB,EAIvCI,qBAAuB,WACrB,EAAKF,SAAS,CAACF,gBAAgB,K,wEAK/B,IAAIH,EAOJ,OALGQ,KAAKN,MAAMC,iBAEZH,EAAW,kBAACS,EAAD,CAAU1B,MAAOyB,KAAKD,wBAIjC,yBAAK5B,UAAU,WACb,kBAAC+B,EAAD,CAASjB,mBAAoBe,KAAKJ,2BAClC,kBAACO,EAAD,CAAYb,KAAMU,KAAKN,MAAMC,iBAC5BH,EACD,kBAACY,EAAD,W,GA7BUC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d5f8ca39.chunk.js","sourcesContent":["import React from 'react';\n\nimport './_scss/_index.scss';\n\nconst person = () => {\n    return (\n        <div className=\"Person\">\n            <h1>Hi, I'm Test</h1>\n            <p>Lorem ipsum dolor sit amet.Lorem ipsum dolor sit amet.Lorem ipsum dolor sit amet.</p>\n            <button className=\"btn btn-danger\">Click here!</button>\n        </div>\n    )\n}\n\nexport default person;","import React from 'react';\nimport './_scss/_index.scss';\n\nconst drawerToggleButton = props => (\n    <button className=\"Toggle-button\" onClick={props.click}>\n        <div className=\"Toggle-button__line\" />\n        <div className=\"Toggle-button__line\" />\n        <div className=\"Toggle-button__line\" />\n    </button>\n);\n\nexport default drawerToggleButton;","const navBarLinks = [\n  {\n    label: \"Home\",\n    link: \"/\"\n  },\n  {\n    label: \"About us\",\n    link: \"/about-us/\"\n  },\n  {\n    label: \"Resume\",\n    link: \"/resume/\"\n  },\n  {\n    label: \"Portfolios\",\n    link: \"/portfolios/\"\n  },\n  {\n    label: \"Contact us\",\n    link: \"/contact-us/\"\n  }\n];\n\nexport { navBarLinks };\n","import React from 'react';\nimport './_scss/_index.scss';\nimport DrawerToggleButton from '../SideDrawer/DrawerToggleButton';\nimport { navBarLinks } from \"../../config/nav-bar-links\";\n\nconst toolbar = (props) => {\n    const links = navBarLinks.map(navBarLink => ({\n        label: navBarLink.label,\n        href: navBarLink.link\n    }));\n\n    return(\n        <header className=\"Toolbar\">\n            <nav className=\"Toolbar__navigation\">\n                <div className=\"Toolbar__navigation-button\"><DrawerToggleButton click={props.drawerClickHandler} /></div>\n                <div className=\"Toolbar__logo\">LOGO</div>\n                <div className=\"Toolbar__spacer\"></div>\n                <div className=\"Toolbar__navigation-items\">\n                    <ul>\n                        {links.map(link => \n                            <li key={link.label}><a href={link.href}>{link.label}</a></li>\n                        )}\n                    </ul>\n                </div>\n            </nav>\n        </header>\n    );\n};\n\nexport default toolbar;","import React from 'react';\nimport './_scss/_index.scss';\nimport { navBarLinks } from \"../../config/nav-bar-links\";\n\nconst navbar = () => {\n    const links = navBarLinks.map(navBarLink => ({\n        label: navBarLink.label,\n        href: navBarLink.link\n    }));\n\n    return(\n        <nav className=\"Navbar__navigation\">\n            <div className=\"Navbar__navigation-items\">\n                <ul>\n                    {links.map(link => \n                        <li key={link.label}><a href={link.href}>{link.label}</a></li>\n                    )}\n                </ul>\n            </div>\n        </nav>\n    );\n};\n\nexport default navbar;","import React from 'react';\nimport './_scss/_index.scss';\nimport Navbar from '../Navbar/Navbar';\n\nconst sideDrawer = props => {\n    let drawerClasses = 'SideDrawer';\n\n    if(props.show){\n        drawerClasses = 'SideDrawer open';\n    }\n    \n    return(\n        <div className={drawerClasses}>\n            <Navbar />\n        </div>\n    );\n};\n\nexport default sideDrawer;","import React from 'react';\nimport './_scss/_index.scss';\n\nconst backDrop = props => (\n    <div className=\"Backdrop\" onClick={props.click} />\n);\n\nexport default backDrop;","import React, { Component } from 'react';\nimport './App.css';\n\nimport Person from './components/Person/Person';\nimport Toolbar from './components/Toolbar/Toolbar';\nimport SideDrawer from './components/SideDrawer/SideDrawer';\nimport Backdrop from './components/Backdrop/Backdrop';\n\nclass App extends Component {\n  state = {\n    sideDrawerOpen: false\n  };\n\n  drawerToggleClickHandler = () => {\n    this.setState((prevState) => {\n      return {sideDrawerOpen: !prevState.sideDrawerOpen};\n    });\n  };\n\n  backDropClickHandler = () => {\n    this.setState({sideDrawerOpen: false});\n  };\n\n  render(){\n    //let sideDrawer;\n    let backDrop;\n\n    if(this.state.sideDrawerOpen){\n      //sideDrawer = <SideDrawer />;\n      backDrop = <Backdrop click={this.backDropClickHandler} />;\n    }\n\n    return (\n      <div className=\"Wrapper\">\n        <Toolbar drawerClickHandler={this.drawerToggleClickHandler} />\n        <SideDrawer show={this.state.sideDrawerOpen} />\n        {backDrop}\n        <Person />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport \"../node_modules/bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}